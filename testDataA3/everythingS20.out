ERROR(34): Symbol 'penguin' is not declared.
ERROR(34): Unary '--' requires an operand of type int but was given type bool.
WARNING(58): The variable c seems not to be used.
WARNING(54): The variable cheese seems not to be used.
WARNING(59): The variable i seems not to be used.
WARNING(54): The variable launch seems not to be used.
WARNING(54): The variable moon seems not to be used.
ERROR(71): '-' requires operands of type int but lhs is of type bool.
WARNING(68): The variable shaun seems not to be used.
WARNING(70): The variable void seems not to be used.
WARNING(81): Variable chicken may be uninitialized when used here.
WARNING(81): Variable run may be uninitialized when used here.
WARNING(84): Variable wallace may be uninitialized when used here.
WARNING(84): Variable gromit may be uninitialized when used here.
WARNING(89): The variable y seems not to be used.
ERROR(91): Symbol 'i' is not declared.
ERROR(91): Symbol 'i' is not declared.
ERROR(91): Symbol 'i' is not declared.
WARNING(124): Variable yarn may be uninitialized when used here.
WARNING(125): Variable wool may be uninitialized when used here.
WARNING(125): Variable shaun may be uninitialized when used here.
ERROR(125): Unary '?' requires an operand of type int but was given type bool.
WARNING(127): Variable preston may be uninitialized when used here.
Var gromit of type int [line: 6]
Sibling: 0  Var _ of type int [line: 7]
Sibling: 1  Var dog__cat of type int [line: 7]
Sibling: 2  Var _nouveau of type int [line: 7]
Sibling: 3  Var _1024 of type int [line: 7]
Sibling: 4  Func wallace returns type void [line: 10]
!   Child: 0  Param wrong of type int [line: 10]
!   Sibling: 0  Param trousers of type int [line: 10]
!   Child: 1  Compound [line: 11]
!   !   Child: 0  Var close of type bool [line: 12]
!   !   !   Child: 0  Const: true [type bool] [line: 12]
!   !   Sibling: 0  Var shave of type bool [line: 12]
!   !   !   Child: 0  Const: false [type bool] [line: 12]
!   !   Child: 1  Const: 1729 [type int] [line: 14]
!   !   Sibling: 0  Id: close [type bool] [line: 15]
!   !   Sibling: 1  Op: + [type int] [line: 16]
!   !   !   Child: 0  Op: * [type int] [line: 16]
!   !   !   !   Child: 0  Const: 11 [type int] [line: 16]
!   !   !   !   Child: 1  Const: 22 [type int] [line: 16]
!   !   !   Child: 1  Op: * [type int] [line: 16]
!   !   !   !   Child: 0  Const: 33 [type int] [line: 16]
!   !   !   !   Child: 1  Const: 44 [type int] [line: 16]
!   !   Sibling: 2  Assign: = [type bool] [line: 17]
!   !   !   Child: 0  Id: close [type bool] [line: 17]
!   !   !   Child: 1  Id: shave [type bool] [line: 17]
!   !   Sibling: 3  Assign: = [type int] [line: 18]
!   !   !   Child: 0  Id: wrong [type int] [line: 18]
!   !   !   Child: 1  Op: % [type int] [line: 18]
!   !   !   !   Child: 0  Id: trousers [type int] [line: 18]
!   !   !   !   Child: 1  Op: / [type int] [line: 18]
!   !   !   !   !   Child: 0  Const: 666 [type int] [line: 18]
!   !   !   !   !   Child: 1  Id: wrong [type int] [line: 18]
!   !   Sibling: 4  Assign: = [type int] [line: 19]
!   !   !   Child: 0  Id: gromit [type int] [line: 19]
!   !   !   Child: 1  Op: + [type int] [line: 19]
!   !   !   !   Child: 0  Op: - [type int] [line: 19]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 19]
!   !   !   !   !   !   Child: 0  Id: wrong [type int] [line: 19]
!   !   !   !   !   !   Child: 1  Id: trousers [type int] [line: 19]
!   !   !   !   !   Child: 1  Id: gromit [type int] [line: 19]
!   !   !   !   Child: 1  Op: - [type int] [line: 19]
!   !   !   !   !   Child: 0  Const: 42 [type int] [line: 19]
!   !   Sibling: 5  Assign: += [type int] [line: 20]
!   !   !   Child: 0  Id: gromit [type int] [line: 20]
!   !   !   Child: 1  Const: 27182818 [type int] [line: 20]
!   !   Sibling: 6  Assign: -= [type int] [line: 21]
!   !   !   Child: 0  Id: gromit [type int] [line: 21]
!   !   !   Child: 1  Op: - [type int] [line: 21]
!   !   !   !   Child: 0  Const: 31415927 [type int] [line: 21]
!   !   Sibling: 7  Assign: /= [type int] [line: 22]
!   !   !   Child: 0  Id: gromit [type int] [line: 22]
!   !   !   Child: 1  Assign: *= [type int] [line: 22]
!   !   !   !   Child: 0  Id: wrong [type int] [line: 22]
!   !   !   !   Child: 1  Const: 42 [type int] [line: 22]
!   !   Sibling: 8  Assign: = [type bool] [line: 23]
!   !   !   Child: 0  Id: close [type bool] [line: 23]
!   !   !   Child: 1  Op: and [type bool] [line: 23]
!   !   !   !   Child: 0  Op: < [type bool] [line: 23]
!   !   !   !   !   Child: 0  Id: wrong [type int] [line: 23]
!   !   !   !   !   Child: 1  Id: trousers [type int] [line: 23]
!   !   !   !   Child: 1  Op: <= [type bool] [line: 23]
!   !   !   !   !   Child: 0  Id: trousers [type int] [line: 23]
!   !   !   !   !   Child: 1  Id: gromit [type int] [line: 23]
!   !   Sibling: 9  Assign: = [type bool] [line: 24]
!   !   !   Child: 0  Id: shave [type bool] [line: 24]
!   !   !   Child: 1  Op: and [type bool] [line: 24]
!   !   !   !   Child: 0  Op: > [type bool] [line: 24]
!   !   !   !   !   Child: 0  Id: wrong [type int] [line: 24]
!   !   !   !   !   Child: 1  Id: trousers [type int] [line: 24]
!   !   !   !   Child: 1  Op: >= [type bool] [line: 24]
!   !   !   !   !   Child: 0  Id: trousers [type int] [line: 24]
!   !   !   !   !   Child: 1  Id: gromit [type int] [line: 24]
!   !   Sibling: 10  Compound [line: 25]
!   !   !   Child: 0  Var a of type int [line: 26]
!   !   !   Sibling: 0  Var grand of type int [line: 26]
!   !   !   !   Child: 0  Op: / [type int] [line: 26]
!   !   !   !   !   Child: 0  Const: 1 [type int] [line: 26]
!   !   !   !   !   Child: 1  Const: 2 [type int] [line: 26]
!   !   !   Sibling: 1  Var day of type int [line: 26]
!   !   !   !   Child: 0  Op: * [type int] [line: 26]
!   !   !   !   !   Child: 0  Const: 3 [type int] [line: 26]
!   !   !   !   !   Child: 1  Const: 4 [type int] [line: 26]
!   !   !   Sibling: 2  Var out of type int [line: 26]
!   !   !   !   Child: 0  Op: - [type int] [line: 26]
!   !   !   !   !   Child: 0  Const: 9 [type int] [line: 26]
!   !   !   Child: 1  Assign: = [type int] [line: 27]
!   !   !   !   Child: 0  Id: a [type int] [line: 27]
!   !   !   !   Child: 1  Assign: += [type int] [line: 27]
!   !   !   !   !   Child: 0  Id: grand [type int] [line: 27]
!   !   !   !   !   Child: 1  Assign: -= [type int] [line: 27]
!   !   !   !   !   !   Child: 0  Id: day [type int] [line: 27]
!   !   !   !   !   !   Child: 1  Id: out [type int] [line: 27]
!   !   Sibling: 11  Assign: = [type bool] [line: 29]
!   !   !   Child: 0  Id: close [type bool] [line: 29]
!   !   !   Child: 1  Op: and [type bool] [line: 29]
!   !   !   !   Child: 0  Op: < [type bool] [line: 29]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 29]
!   !   !   !   !   !   Child: 0  Op: * [type int] [line: 29]
!   !   !   !   !   !   !   Child: 0  Op: - [type int] [line: 29]
!   !   !   !   !   !   !   !   Child: 0  Const: 1 [type int] [line: 29]
!   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 29]
!   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 29]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 29]
!   !   !   !   !   !   Child: 0  Const: 4 [type int] [line: 29]
!   !   !   !   !   !   Child: 1  Const: 5 [type int] [line: 29]
!   !   !   !   Child: 1  Op: > [type bool] [line: 29]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 29]
!   !   !   !   !   !   Child: 0  Const: 6 [type int] [line: 29]
!   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 29]
!   !   !   !   !   Child: 1  Op: - [type int] [line: 29]
!   !   !   !   !   !   Child: 0  Const: 3 [type int] [line: 29]
!   !   Sibling: 12  Assign: = [type bool] [line: 30]
!   !   !   Child: 0  Id: shave [type bool] [line: 30]
!   !   !   Child: 1  Op: or [type bool] [line: 30]
!   !   !   !   Child: 0  Const: true [type bool] [line: 30]
!   !   !   !   Child: 1  Op: and [type bool] [line: 30]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 30]
!   !   !   !   !   !   Child: 0  Op: - [type int] [line: 30]
!   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 30]
!   !   !   !   !   !   !   !   Child: 0  Const: 1 [type int] [line: 30]
!   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 30]
!   !   !   !   !   !   !   !   !   Child: 0  Const: 2 [type int] [line: 30]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 30]
!   !   !   !   !   !   Child: 1  Op: * [type int] [line: 30]
!   !   !   !   !   !   !   Child: 0  Const: 4 [type int] [line: 30]
!   !   !   !   !   !   !   Child: 1  Const: 5 [type int] [line: 30]
!   !   !   !   !   Child: 1  Op: > [type bool] [line: 30]
!   !   !   !   !   !   Child: 0  Op: + [type int] [line: 30]
!   !   !   !   !   !   !   Child: 0  Const: 6 [type int] [line: 30]
!   !   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 30]
!   !   !   !   !   !   Child: 1  Op: - [type int] [line: 30]
!   !   !   !   !   !   !   Child: 0  Const: 3 [type int] [line: 30]
!   !   Sibling: 13  If [line: 31]
!   !   !   Child: 0  Op: != [type bool] [line: 31]
!   !   !   !   Child: 0  Id: shave [type bool] [line: 31]
!   !   !   !   Child: 1  Id: close [type bool] [line: 31]
!   !   !   Child: 1  Assign: = [type bool] [line: 31]
!   !   !   !   Child: 0  Id: shave [type bool] [line: 31]
!   !   !   !   Child: 1  Op: not [type bool] [line: 31]
!   !   !   !   !   Child: 0  Id: close [type bool] [line: 31]
!   !   Sibling: 14  If [line: 32]
!   !   !   Child: 0  Op: not [type bool] [line: 32]
!   !   !   !   Child: 0  Op: or [type bool] [line: 32]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 32]
!   !   !   !   !   !   Child: 0  Id: shave [type bool] [line: 32]
!   !   !   !   !   !   Child: 1  Id: close [type bool] [line: 32]
!   !   !   !   !   Child: 1  Op: not [type bool] [line: 32]
!   !   !   !   !   !   Child: 0  Id: close [type bool] [line: 32]
!   !   !   Child: 1  Assign: = [type bool] [line: 32]
!   !   !   !   Child: 0  Id: shave [type bool] [line: 32]
!   !   !   !   Child: 1  Const: true [type bool] [line: 32]
!   !   !   Child: 2  Assign: = [type bool] [line: 33]
!   !   !   !   Child: 0  Id: close [type bool] [line: 33]
!   !   !   !   Child: 1  Const: false [type bool] [line: 33]
!   !   Sibling: 15  Assign: = [undefined type] [line: 34]
!   !   !   Child: 0  Id: penguin [undefined type] [line: 34]
!   !   !   Child: 1  Op: - [type int] [line: 34]
!   !   !   !   Child: 0  Op: - [type int] [line: 34]
!   !   !   !   !   Child: 0  Op: - [type int] [line: 34]
!   !   !   !   !   !   Child: 0  Op: - [type int] [line: 34]
!   !   !   !   !   !   !   Child: 0  Const: 8 [type int] [line: 34]
!   !   !   !   !   Child: 1  Op: - [type int] [line: 34]
!   !   !   !   !   !   Child: 0  Assign: -- [type int] [line: 34]
!   !   !   !   !   !   !   Child: 0  Id: close [type bool] [line: 34]
!   !   Sibling: 16  While [line: 36]
!   !   !   Child: 0  Id: shave [type bool] [line: 36]
!   !   !   Child: 1  Compound [line: 36]
!   !   !   !   Child: 0  Var were of type int [line: 37]
!   !   !   !   Sibling: 0  Var rabbit of type int [line: 37]
!   !   !   !   Sibling: 1  Var sheep is array of type int [line: 38]
!   !   !   !   Child: 1  Assign: = [type int] [line: 40]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 40]
!   !   !   !   !   !   Child: 0  Id: sheep [type int] [line: 40]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 40]
!   !   !   !   !   Child: 1  Const: 1618 [type int] [line: 40]
!   !   !   !   Sibling: 0  If [line: 41]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 41]
!   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 41]
!   !   !   !   !   !   !   Child: 0  Id: sheep [type int] [line: 41]
!   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 41]
!   !   !   !   !   !   Child: 1  Const: 496 [type int] [line: 41]
!   !   !   !   !   Child: 1  Break [line: 41]
!   !   !   !   Sibling: 1  Call: wallace [type void] [line: 42]
!   !   !   !   !   Child: 0  Assign: -- [type int] [line: 42]
!   !   !   !   !   !   Child: 0  Id: gromit [type int] [line: 42]
!   !   !   !   !   Sibling: 0  Op: - [type int] [line: 42]
!   !   !   !   !   !   Child: 0  Id: were [type int] [line: 42]
!   !   !   !   !   !   Child: 1  Id: rabbit [type int] [line: 42]
!   !   !   !   Sibling: 2  Compound [line: 43]
!   !   !   !   !   Child: 0  Var the of type int [line: 44]
!   !   !   !   !   Sibling: 0  Var wrong of type int [line: 44]
!   !   !   !   !   Sibling: 1  Var trousers of type int [line: 44]
!   !   !   !   !   Child: 1  Assign: = [type int] [line: 46]
!   !   !   !   !   !   Child: 0  Id: the [type int] [line: 46]
!   !   !   !   !   !   Child: 1  Assign: += [type int] [line: 46]
!   !   !   !   !   !   !   Child: 0  Id: wrong [type int] [line: 46]
!   !   !   !   !   !   !   Child: 1  Assign: ++ [type int] [line: 46]
!   !   !   !   !   !   !   !   Child: 0  Id: trousers [type int] [line: 46]
!   !   !   !   !   Sibling: 0  If [line: 47]
!   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 47]
!   !   !   !   !   !   !   Child: 0  Id: were [type int] [line: 47]
!   !   !   !   !   !   !   Child: 1  Id: rabbit [type int] [line: 47]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 47]
!   !   !   !   !   !   !   Child: 0  Id: were [type int] [line: 47]
!   !   !   !   !   !   !   Child: 1  Assign: -- [type int] [line: 47]
!   !   !   !   !   !   !   !   Child: 0  Id: wrong [type int] [line: 47]
!   !   Sibling: 17  Return [line: 50]
Sibling: 5  Func penguin returns type bool [line: 54]
!   Child: 0  Param Feathers of type char [line: 54]
!   Sibling: 0  Param McGraw is array of type char [line: 54]
!   Sibling: 1  Param moon of type bool [line: 54]
!   Sibling: 2  Param cheese of type bool [line: 54]
!   Sibling: 3  Param launch of type int [line: 54]
!   Child: 1  Compound [line: 55]
!   !   Child: 0  Var tottington of type char [line: 56]
!   !   !   Child: 0  Const: 'x' [type char] [line: 56]
!   !   Sibling: 0  Var Wensleydale is array of type char [line: 57]
!   !   Sibling: 1  Var c of type char [line: 58]
!   !   Sibling: 2  Var i of type int [line: 59]
!   !   Child: 1  Assign: = [type char] [line: 61]
!   !   !   Child: 0  Id: tottington [type char] [line: 61]
!   !   !   Child: 1  Id: Feathers [type char] [line: 61]
!   !   Sibling: 0  Assign: = [type char] [line: 62]
!   !   !   Child: 0  Id: McGraw [type char] [line: 62]
!   !   !   Child: 1  Id: Feathers [type char] [line: 62]
!   !   Sibling: 1  Assign: = [type char] [line: 63]
!   !   !   Child: 0  Id: Wensleydale [type char] [line: 63]
!   !   !   Child: 1  Id: McGraw [type char] [line: 63]
!   !   Sibling: 2  Assign: = [type char] [line: 64]
!   !   !   Child: 0  Op: [ [type char] [line: 64]
!   !   !   !   Child: 0  Id: Wensleydale [type char] [line: 64]
!   !   !   !   Child: 1  Op: * [type int] [line: 64]
!   !   !   !   !   Child: 0  Id: McGraw [type char] [line: 64]
!   !   !   Child: 1  Const: 'Q' [type char] [line: 64]
!   !   Sibling: 3  Assign: = [type char] [line: 65]
!   !   !   Child: 0  Op: [ [type char] [line: 65]
!   !   !   !   Child: 0  Id: McGraw [type char] [line: 65]
!   !   !   !   Child: 1  Const: 3 [type int] [line: 65]
!   !   !   Child: 1  Const: 'A' [type char] [line: 65]
Sibling: 6  Func Wendolene returns type int [line: 68]
!   Child: 0  Param wool of type int [line: 68]
!   Sibling: 0  Param shaun of type bool [line: 68]
!   Sibling: 1  Param yarn is array of type int [line: 68]
!   Sibling: 2  Param preston is array of type bool [line: 68]
!   Child: 1  Compound [line: 69]
!   !   Child: 0  Var void of type int [line: 70]
!   !   Child: 1  Return [line: 71]
!   !   !   Child: 0  Op: + [type int] [line: 71]
!   !   !   !   Child: 0  Op: + [type int] [line: 71]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 71]
!   !   !   !   !   !   Child: 0  Op: + [type int] [line: 71]
!   !   !   !   !   !   !   Child: 0  Id: wool [type int] [line: 71]
!   !   !   !   !   !   !   Child: 1  Op: [ [type int] [line: 71]
!   !   !   !   !   !   !   !   Child: 0  Id: yarn [type int] [line: 71]
!   !   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 71]
!   !   !   !   !   !   Child: 1  Op: * [type int] [line: 71]
!   !   !   !   !   !   !   Child: 0  Id: yarn [type int] [line: 71]
!   !   !   !   !   Child: 1  Op: [ [type int] [line: 71]
!   !   !   !   !   !   Child: 0  Id: yarn [type int] [line: 71]
!   !   !   !   !   !   Child: 1  Op: * [type int] [line: 71]
!   !   !   !   !   !   !   Child: 0  Const: 7 [type int] [line: 71]
!   !   !   !   !   !   !   Child: 1  Id: wool [type int] [line: 71]
!   !   !   !   Child: 1  Op: [ [type int] [line: 71]
!   !   !   !   !   Child: 0  Id: yarn [type int] [line: 71]
!   !   !   !   !   Child: 1  Op: - [type int] [line: 71]
!   !   !   !   !   !   Child: 0  Op: [ [type bool] [line: 71]
!   !   !   !   !   !   !   Child: 0  Id: preston [type bool] [line: 71]
!   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 71]
!   !   !   !   !   !   !   !   Child: 0  Const: 3 [type int] [line: 71]
!   !   !   !   !   !   !   !   Child: 1  Op: * [type int] [line: 71]
!   !   !   !   !   !   !   !   !   Child: 0  Id: wool [type int] [line: 71]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 71]
!   !   !   !   !   !   Child: 1  Const: 4 [type int] [line: 71]
Sibling: 7  Func ramsBottom returns type bool [line: 75]
!   Child: 1  Compound [line: 76]
!   !   Child: 0  Var chicken is array of type int [line: 77]
!   !   Sibling: 0  Var run is array of type bool [line: 78]
!   !   Sibling: 1  Var wallace is array of type int [line: 79]
!   !   Sibling: 2  Var gromit is array of type int [line: 79]
!   !   Child: 1  Op: * [type int] [line: 81]
!   !   !   Child: 0  Const: 42 [type int] [line: 81]
!   !   !   Child: 1  Call: Wendolene [type int] [line: 81]
!   !   !   !   Child: 0  Op: + [type int] [line: 81]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 81]
!   !   !   !   !   !   Child: 0  Const: 1 [type int] [line: 81]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 81]
!   !   !   !   !   Child: 1  Const: 3 [type int] [line: 81]
!   !   !   !   Sibling: 0  Op: or [type bool] [line: 81]
!   !   !   !   !   Child: 0  Op: not [type bool] [line: 81]
!   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 81]
!   !   !   !   !   Child: 1  Op: and [type bool] [line: 81]
!   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 81]
!   !   !   !   !   !   Child: 1  Const: false [type bool] [line: 81]
!   !   !   !   Sibling: 1  Id: chicken [type int] [line: 81]
!   !   !   !   Sibling: 2  Id: run [type bool] [line: 81]
!   !   Sibling: 0  Op: [ [type bool] [line: 82]
!   !   !   Child: 0  Id: run [type bool] [line: 82]
!   !   !   Child: 1  Op: - [type int] [line: 82]
!   !   !   !   Child: 0  Op: * [type int] [line: 82]
!   !   !   !   !   Child: 0  Id: run [type bool] [line: 82]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 82]
!   !   Sibling: 1  Return [line: 84]
!   !   !   Child: 0  Op: not [type bool] [line: 84]
!   !   !   !   Child: 0  Op: >= [type bool] [line: 84]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 84]
!   !   !   !   !   !   Child: 0  Id: wallace [type int] [line: 84]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 84]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 84]
!   !   !   !   !   !   Child: 0  Op: - [type int] [line: 84]
!   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 84]
!   !   !   !   !   !   !   !   Child: 0  Id: gromit [type int] [line: 84]
!   !   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 84]
!   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 84]
Sibling: 8  Func cheese returns type int [line: 87]
!   Child: 0  Param x of type int [line: 87]
!   Sibling: 0  Param y of type int [line: 87]
!   Child: 1  While [line: 87]
!   !   Child: 0  Op: > [type bool] [line: 87]
!   !   !   Child: 0  Id: x [type int] [line: 87]
!   !   !   Child: 1  Const: 0 [type int] [line: 87]
!   !   Child: 1  If [line: 87]
!   !   !   Child: 0  Op: > [type bool] [line: 87]
!   !   !   !   Child: 0  Id: y [type int] [line: 87]
!   !   !   !   Child: 1  Const: 3 [type int] [line: 87]
!   !   !   Child: 1  Assign: -- [type int] [line: 87]
!   !   !   !   Child: 0  Id: x [type int] [line: 87]
!   !   !   Child: 2  Return [line: 87]
!   !   !   !   Child: 0  Op: % [type int] [line: 87]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 87]
!   !   !   !   !   !   Child: 0  Id: x [type int] [line: 87]
!   !   !   !   !   !   Child: 1  Id: x [type int] [line: 87]
!   !   !   !   !   Child: 1  Id: y [type int] [line: 87]
Sibling: 9  Func Wensleydale returns type int [line: 89]
!   Child: 0  Param x of type int [line: 89]
!   Sibling: 0  Param y of type int [line: 89]
!   Child: 1  Return [line: 89]
!   !   Child: 0  Call: cheese [type int] [line: 89]
!   !   !   Child: 0  Id: x [type int] [line: 89]
!   !   !   Sibling: 0  Id: gromit [type int] [line: 89]
Sibling: 10  Func LadyCampanula returns type int [line: 91]
!   Child: 0  Param c of type char [line: 91]
!   Sibling: 0  Param s is array of type char [line: 91]
!   Child: 1  Loop [line: 91]
!   !   Child: 0  Id: i [undefined type] [line: 91]
!   !   Child: 1  Range [line: 91]
!   !   !   Child: 0  Op: - [type int] [line: 91]
!   !   !   !   Child: 0  Op: * [type int] [line: 91]
!   !   !   !   !   Child: 0  Id: s [type char] [line: 91]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 91]
!   !   !   Child: 1  Const: 0 [type int] [line: 91]
!   !   !   Child: 2  Op: - [type int] [line: 91]
!   !   !   !   Child: 0  Const: 1 [type int] [line: 91]
!   !   Child: 2  If [line: 91]
!   !   !   Child: 0  Op: == [type bool] [line: 91]
!   !   !   !   Child: 0  Op: [ [type char] [line: 91]
!   !   !   !   !   Child: 0  Id: s [type char] [line: 91]
!   !   !   !   !   Child: 1  Id: i [undefined type] [line: 91]
!   !   !   !   Child: 1  Id: c [type char] [line: 91]
!   !   !   Child: 1  Return [line: 91]
!   !   !   !   Child: 0  Id: i [undefined type] [line: 91]
Sibling: 11  Func MrsTweedy returns type char [line: 93]
!   Child: 0  Param c of type char [line: 93]
!   Sibling: 0  Param s is array of type char [line: 93]
!   Child: 1  Compound [line: 93]
!   !   Child: 1  Loop [line: 95]
!   !   !   Child: 0  Var ginger of type int [line: 95]
!   !   !   Child: 1  Range [line: 95]
!   !   !   !   Child: 0  Const: 0 [type int] [line: 95]
!   !   !   !   Child: 1  Const: 10 [type int] [line: 95]
!   !   !   !   Child: 2  Const: 1 [type int] [line: 95]
!   !   !   Child: 2  Assign: = [type char] [line: 95]
!   !   !   !   Child: 0  Op: [ [type char] [line: 95]
!   !   !   !   !   Child: 0  Id: s [type char] [line: 95]
!   !   !   !   !   Child: 1  Id: ginger [type int] [line: 95]
!   !   !   !   Child: 1  Id: c [type char] [line: 95]
!   !   Sibling: 0  LoopForever [line: 96]
!   !   !   Child: 1  Break [line: 96]
!   !   Sibling: 1  LoopForever [line: 97]
!   !   !   Child: 1  If [line: 97]
!   !   !   !   Child: 0  Op: == [type bool] [line: 97]
!   !   !   !   !   Child: 0  Op: [ [type char] [line: 97]
!   !   !   !   !   !   Child: 0  Id: s [type char] [line: 97]
!   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 97]
!   !   !   !   !   Child: 1  Op: [ [type char] [line: 97]
!   !   !   !   !   !   Child: 0  Id: s [type char] [line: 97]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 97]
!   !   !   !   Child: 1  Break [line: 97]
!   !   Sibling: 2  While [line: 98]
!   !   !   Child: 0  Const: true [type bool] [line: 98]
!   !   !   Child: 1  Break [line: 98]
!   !   Sibling: 3  Return [line: 100]
!   !   !   Child: 0  Const: 'x' [type char] [line: 100]
Sibling: 12  Func TheWereRabbit returns type char [line: 103]
!   Child: 0  Param x of type int [line: 103]
!   Child: 1  Compound [line: 104]
!   !   Child: 1  If [line: 105]
!   !   !   Child: 0  Op: == [type bool] [line: 105]
!   !   !   !   Child: 0  Id: x [type int] [line: 105]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 105]
!   !   !   Child: 1  Return [line: 105]
!   !   !   !   Child: 0  Const: '@' [type char] [line: 105]
!   !   !   Child: 2  Elsif [line: 106]
!   !   !   !   Child: 0  Op: == [type bool] [line: 106]
!   !   !   !   !   Child: 0  Id: x [type int] [line: 106]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 106]
!   !   !   !   Child: 1  Return [line: 106]
!   !   !   !   !   Child: 0  Const: 'a' [type char] [line: 106]
!   !   !   !   Child: 2  Elsif [line: 107]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 107]
!   !   !   !   !   !   Child: 0  Id: x [type int] [line: 107]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 107]
!   !   !   !   !   Child: 1  Return [line: 107]
!   !   !   !   !   !   Child: 0  Const: 'b' [type char] [line: 107]
!   !   !   !   !   Child: 2  Elsif [line: 108]
!   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 108]
!   !   !   !   !   !   !   Child: 0  Id: x [type int] [line: 108]
!   !   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 108]
!   !   !   !   !   !   Child: 1  Return [line: 108]
!   !   !   !   !   !   !   Child: 0  Const: 'c' [type char] [line: 108]
!   !   !   !   !   !   Child: 2  Elsif [line: 109]
!   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 109]
!   !   !   !   !   !   !   !   Child: 0  Id: x [type int] [line: 109]
!   !   !   !   !   !   !   !   Child: 1  Const: 4 [type int] [line: 109]
!   !   !   !   !   !   !   Child: 1  Return [line: 109]
!   !   !   !   !   !   !   !   Child: 0  Const: 'd' [type char] [line: 109]
!   !   !   !   !   !   !   Child: 2  Return [line: 110]
!   !   !   !   !   !   !   !   Child: 0  Const: ' ' [type char] [line: 110]
Sibling: 13  Func main returns type int [line: 113]
!   Child: 1  Compound [line: 114]
!   !   Child: 0  Var wool of type int [line: 115]
!   !   Sibling: 0  Var yarn is array of type int [line: 115]
!   !   Sibling: 1  Var shaun of type bool [line: 116]
!   !   Sibling: 2  Var preston is array of type bool [line: 116]
!   !   Sibling: 3  Var rocky is array of type char [line: 117]
!   !   Child: 1  Call: wallace [type void] [line: 119]
!   !   !   Child: 0  Call: cheese [type int] [line: 119]
!   !   !   !   Child: 0  Const: 62 [type int] [line: 119]
!   !   !   !   Sibling: 0  Op: - [type int] [line: 119]
!   !   !   !   !   Child: 0  Const: 311 [type int] [line: 119]
!   !   !   Sibling: 0  Id: gromit [type int] [line: 119]
!   !   Sibling: 0  Assign: = [type char] [line: 120]
!   !   !   Child: 0  Id: rocky [type char] [line: 120]
!   !   !   Child: 1  Const: "molybdenum" [type char] [line: 120]
!   !   Sibling: 1  Call: MrsTweedy [type char] [line: 122]
!   !   !   Child: 0  Const: 'Z' [type char] [line: 122]
!   !   !   Sibling: 0  Id: rocky [type char] [line: 122]
!   !   Sibling: 2  Op: + [type int] [line: 124]
!   !   !   Child: 0  Op: [ [type int] [line: 124]
!   !   !   !   Child: 0  Id: yarn [type int] [line: 124]
!   !   !   !   Child: 1  Op: ? [type int] [line: 124]
!   !   !   !   !   Child: 0  Const: 100 [type int] [line: 124]
!   !   !   Child: 1  Op: [ [type int] [line: 124]
!   !   !   !   Child: 0  Id: yarn [type int] [line: 124]
!   !   !   !   Child: 1  Op: ? [type int] [line: 124]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 124]
!   !   !   !   !   !   Child: 0  Id: yarn [type int] [line: 124]
!   !   Sibling: 3  Op: + [type int] [line: 125]
!   !   !   Child: 0  Op: + [type int] [line: 125]
!   !   !   !   Child: 0  Op: ? [type int] [line: 125]
!   !   !   !   !   Child: 0  Id: wool [type int] [line: 125]
!   !   !   !   Child: 1  Op: ? [type int] [line: 125]
!   !   !   !   !   Child: 0  Id: shaun [type bool] [line: 125]
!   !   !   Child: 1  Op: ? [type int] [line: 125]
!   !   !   !   Child: 0  Op: ? [type int] [line: 125]
!   !   !   !   !   Child: 0  Const: 10 [type int] [line: 125]
!   !   Sibling: 4  Return [line: 127]
!   !   !   Child: 0  Call: Wendolene [type int] [line: 127]
!   !   !   !   Child: 0  Op: * [type int] [line: 127]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 127]
!   !   !   !   !   !   Child: 0  Id: preston [type bool] [line: 127]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 127]
!   !   !   !   !   !   Child: 0  Id: yarn [type int] [line: 127]
!   !   !   !   Sibling: 0  Id: shaun [type bool] [line: 127]
!   !   !   !   Sibling: 1  Id: yarn [type int] [line: 127]
!   !   !   !   Sibling: 2  Id: preston [type bool] [line: 127]
Sibling: 14  Var aBigLongVariableName6 of type bool [line: 130]
Sibling: 15  Var odd of type int [line: 131]
Sibling: 16  Var separation of type int [line: 131]
Sibling: 17  Var of of type int [line: 131]
Sibling: 18  Var stuff of type int [line: 132]
Sibling: 19  Var ant is array of type char [line: 134]
!   Child: 0  Const: "unwrinkled" [type char] [line: 134]
Sibling: 20  Var bat of type char [line: 135]
!   Child: 0  Const: ''' [type char] [line: 135]
Sibling: 21  Var cat of type char [line: 136]
!   Child: 0  Const: 't' [type char] [line: 136]
Sibling: 22  Var dog of type char [line: 137]
!   Child: 0  Const: '
' [type char] [line: 137]
Sibling: 23  Var hog of type char [line: 138]
!   Child: 0  Const: ' ' [type char] [line: 138]
Number of warnings: 16
Number of errors: 7
