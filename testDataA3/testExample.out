ERROR(17): Symbol 'fred' is not declared.
ERROR(LINKER): Procedure main is not declared.
Var zev is array of type char [line: 1]
!   Child: 0  Const: "corgis" [type char] [line: 1]
Sibling: 0  Var x of type int [line: 2]
!   Child: 0  Const: 42 [type int] [line: 2]
Sibling: 1  Var y of type int [line: 2]
!   Child: 0  Const: 666 [type int] [line: 2]
Sibling: 2  Func ant returns type int [line: 4]
!   Child: 0  Param bat of type int [line: 4]
!   Sibling: 0  Param cat is array of type int [line: 4]
!   Sibling: 1  Param dog of type bool [line: 4]
!   Sibling: 2  Param elk of type bool [line: 4]
!   Sibling: 3  Param fox of type int [line: 4]
!   Sibling: 4  Param gnu of type char [line: 4]
!   Child: 1  Compound [line: 5]
!   !   Child: 0  Var goat of type int [line: 6]
!   !   Sibling: 0  Var hog is array of type int [line: 6]
!   !   Child: 1  Assign: = [type char] [line: 8]
!   !   !   Child: 0  Id: gnu [type char] [line: 8]
!   !   !   Child: 1  Const: 'W' [type char] [line: 8]
!   !   Sibling: 0  Assign: = [type int] [line: 9]
!   !   !   Child: 0  Id: goat [type int] [line: 9]
!   !   !   Child: 1  Assign: = [type int] [line: 9]
!   !   !   !   Child: 0  Op: [ [type int] [line: 9]
!   !   !   !   !   Child: 0  Id: hog [type int] [line: 9]
!   !   !   !   !   Child: 1  Const: 2 [type int] [line: 9]
!   !   !   !   Child: 1  Op: * [type int] [line: 9]
!   !   !   !   !   Child: 0  Const: 3 [type int] [line: 9]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 9]
!   !   !   !   !   !   Child: 0  Id: cat [type int] [line: 9]
!   !   Sibling: 1  If [line: 10]
!   !   !   Child: 0  Op: or [type bool] [line: 10]
!   !   !   !   Child: 0  Op: and [type bool] [line: 10]
!   !   !   !   !   Child: 0  Id: dog [type bool] [line: 10]
!   !   !   !   !   Child: 1  Id: elk [type bool] [line: 10]
!   !   !   !   Child: 1  Op: > [type bool] [line: 10]
!   !   !   !   !   Child: 0  Id: bat [type int] [line: 10]
!   !   !   !   !   Child: 1  Op: [ [type int] [line: 10]
!   !   !   !   !   !   Child: 0  Id: cat [type int] [line: 10]
!   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 10]
!   !   !   Child: 1  Assign: = [type bool] [line: 10]
!   !   !   !   Child: 0  Id: dog [type bool] [line: 10]
!   !   !   !   Child: 1  Op: not [type bool] [line: 10]
!   !   !   !   !   Child: 0  Id: dog [type bool] [line: 10]
!   !   !   Child: 2  Assign: ++ [type int] [line: 11]
!   !   !   !   Child: 0  Id: fox [type int] [line: 11]
!   !   Sibling: 2  If [line: 12]
!   !   !   Child: 0  Op: <= [type bool] [line: 12]
!   !   !   !   Child: 0  Id: bat [type int] [line: 12]
!   !   !   !   Child: 1  Id: fox [type int] [line: 12]
!   !   !   Child: 1  Compound [line: 12]
!   !   !   !   Child: 1  While [line: 13]
!   !   !   !   !   Child: 0  Id: dog [type bool] [line: 13]
!   !   !   !   !   Child: 1  Compound [line: 13]
!   !   !   !   !   !   Child: 0  Var hog of type int [line: 14]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 16]
!   !   !   !   !   !   !   Child: 0  Id: hog [type int] [line: 16]
!   !   !   !   !   !   !   Child: 1  Id: fox [type int] [line: 16]
!   !   !   !   !   !   Sibling: 0  Assign: = [type bool] [line: 17]
!   !   !   !   !   !   !   Child: 0  Id: dog [type bool] [line: 17]
!   !   !   !   !   !   !   Child: 1  Op: > [type bool] [line: 17]
!   !   !   !   !   !   !   !   Child: 0  Call: fred [undefined type] [line: 17]
!   !   !   !   !   !   !   !   !   Child: 0  Assign: ++ [type int] [line: 17]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: fox [type int] [line: 17]
!   !   !   !   !   !   !   !   !   Sibling: 0  Id: cat [type int] [line: 17]
!   !   !   !   !   !   !   !   Child: 1  Const: 666 [type int] [line: 17]
!   !   !   !   !   !   Sibling: 1  If [line: 18]
!   !   !   !   !   !   !   Child: 0  Op: > [type bool] [line: 18]
!   !   !   !   !   !   !   !   Child: 0  Id: hog [type int] [line: 18]
!   !   !   !   !   !   !   !   Child: 1  Id: bat [type int] [line: 18]
!   !   !   !   !   !   !   Child: 1  Break [line: 18]
!   !   !   !   !   !   !   Child: 2  If [line: 19]
!   !   !   !   !   !   !   !   Child: 0  Op: != [type bool] [line: 19]
!   !   !   !   !   !   !   !   !   Child: 0  Id: fox [type int] [line: 19]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 19]
!   !   !   !   !   !   !   !   Child: 1  Assign: += [type int] [line: 19]
!   !   !   !   !   !   !   !   !   Child: 0  Id: fox [type int] [line: 19]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 19]
!   !   Sibling: 3  Loop [line: 23]
!   !   !   Child: 0  Var i of type int [line: 23]
!   !   !   Child: 1  Range [line: 23]
!   !   !   !   Child: 0  Const: 1 [type int] [line: 23]
!   !   !   !   Child: 1  Const: 10 [type int] [line: 23]
!   !   !   !   Child: 2  Const: 3 [type int] [line: 23]
!   !   !   Child: 2  Compound [line: 23]
!   !   !   !   Child: 1  If [line: 24]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 24]
!   !   !   !   !   !   Child: 0  Id: x [type int] [line: 24]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 24]
!   !   !   !   !   Child: 1  Assign: = [type int] [line: 24]
!   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 24]
!   !   !   !   !   !   !   Child: 0  Id: cat [type int] [line: 24]
!   !   !   !   !   !   !   Child: 1  Id: i [type int] [line: 24]
!   !   !   !   !   !   Child: 1  Id: bat [type int] [line: 24]
!   !   !   !   !   Child: 2  Elsif [line: 25]
!   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 25]
!   !   !   !   !   !   !   Child: 0  Id: x [type int] [line: 25]
!   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 25]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 25]
!   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 25]
!   !   !   !   !   !   !   !   Child: 0  Id: cat [type int] [line: 25]
!   !   !   !   !   !   !   !   Child: 1  Id: i [type int] [line: 25]
!   !   !   !   !   !   !   Child: 1  Op: % [type int] [line: 25]
!   !   !   !   !   !   !   !   Child: 0  Id: bat [type int] [line: 25]
!   !   !   !   !   !   !   !   Child: 1  Const: 17 [type int] [line: 25]
!   !   !   !   !   !   Child: 2  Elsif [line: 26]
!   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 26]
!   !   !   !   !   !   !   !   Child: 0  Id: x [type int] [line: 26]
!   !   !   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 26]
!   !   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 26]
!   !   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 26]
!   !   !   !   !   !   !   !   !   Child: 0  Id: cat [type int] [line: 26]
!   !   !   !   !   !   !   !   !   Child: 1  Id: i [type int] [line: 26]
!   !   !   !   !   !   !   !   Child: 1  Const: 78 [type int] [line: 26]
!   !   !   !   !   !   !   Child: 2  Assign: ++ [type int] [line: 27]
!   !   !   !   !   !   !   !   Child: 0  Id: x [type int] [line: 27]
!   !   Sibling: 4  LoopForever [line: 30]
!   !   !   Child: 1  If [line: 30]
!   !   !   !   Child: 0  Op: > [type bool] [line: 30]
!   !   !   !   !   Child: 0  Id: x [type int] [line: 30]
!   !   !   !   !   Child: 1  Const: 333 [type int] [line: 30]
!   !   !   !   Child: 1  Break [line: 30]
!   !   !   !   Child: 2  Assign: ++ [type int] [line: 30]
!   !   !   !   !   Child: 0  Id: x [type int] [line: 30]
!   !   Sibling: 5  Return [line: 32]
!   !   !   Child: 0  Op: / [type int] [line: 32]
!   !   !   !   Child: 0  Op: + [type int] [line: 32]
!   !   !   !   !   Child: 0  Id: fox [type int] [line: 32]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 32]
!   !   !   !   !   !   Child: 0  Id: bat [type int] [line: 32]
!   !   !   !   !   !   Child: 1  Op: [ [type int] [line: 32]
!   !   !   !   !   !   !   Child: 0  Id: cat [type int] [line: 32]
!   !   !   !   !   !   !   Child: 1  Id: bat [type int] [line: 32]
!   !   !   !   Child: 1  Op: - [type int] [line: 32]
!   !   !   !   !   Child: 0  Id: fox [type int] [line: 32]
Sibling: 3  Func max returns type int [line: 36]
!   Child: 0  Param a of type int [line: 36]
!   Sibling: 0  Param b of type int [line: 36]
!   Child: 1  If [line: 36]
!   !   Child: 0  Op: > [type bool] [line: 36]
!   !   !   Child: 0  Id: a [type int] [line: 36]
!   !   !   Child: 1  Id: b [type int] [line: 36]
!   !   Child: 1  Return [line: 36]
!   !   !   Child: 0  Id: a [type int] [line: 36]
!   !   Child: 2  Return [line: 36]
!   !   !   Child: 0  Id: b [type int] [line: 36]
Number of warnings: 0
Number of errors: 2
